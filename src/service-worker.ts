/// <reference lib="webworker" />
import { clientsClaim } from 'workbox-core';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

declare const self: ServiceWorkerGlobalScope;

// Use clientsClaim() to immediately take control of all clients under service worker's scope
clientsClaim();
self.skipWaiting();

// Precache all assets generated by vite
precacheAndRoute(self.__WB_MANIFEST);

// Single Page Application routing - return index.html for navigation requests
const handler = createHandlerBoundToURL('/index.html');
registerRoute(({ request }) => request.mode === 'navigate', handler);

// Cache Google Fonts stylesheets
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache Google Fonts webfonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache static assets (JS, CSS)
registerRoute(
  ({ request }) =>
    request.destination === 'script' ||
    request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache Supabase API requests
registerRoute(
  ({ url }) => url.hostname.includes('supabase.co'),
  new NetworkFirst({
    cacheName: 'api-responses',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Handle push notifications
self.addEventListener('push', (event) => {
  if (!event.data) return;
  
  try {
    const data = event.data.json();
    
    // Show notification
    event.waitUntil(
      self.registration.showNotification(data.title, {
        body: data.message,
        icon: '/icons/app-icon-192x192.png',
        badge: '/icons/badge-icon-96x96.png',
        tag: data.id || 'payment-reminder',
        data: {
          url: data.url || '/dashboard?source=notification',
          reminderId: data.id,
          paymentTransactionId: data.paymentTransactionId,
        },
        actions: [
          {
            action: 'view',
            title: 'View Payment',
          },
          {
            action: 'dismiss',
            title: 'Dismiss',
          },
        ],
        vibrate: [100, 50, 100],
        requireInteraction: true,
      })
    );
  } catch (error) {
    console.error('Error showing notification:', error);
  }
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  // Extract data from notification
  const { url, reminderId, paymentTransactionId } = event.notification.data || {};
  
  let navigateUrl = url || '/dashboard';
  
  // Handle action buttons
  if (event.action === 'view' && paymentTransactionId) {
    navigateUrl = `/payments/${paymentTransactionId}?source=notification`;
  }
  
  // Focus or open window
  event.waitUntil(
    self.clients.matchAll({ type: 'window' }).then((clientList) => {
      // If client already open, focus it
      for (const client of clientList) {
        if (client.url.includes(self.location.origin) && 'focus' in client) {
          client.navigate(navigateUrl);
          return client.focus();
        }
      }
      // Otherwise, open new window
      return self.clients.openWindow(navigateUrl);
    })
  );
  
  // If a reminder ID was provided, mark the reminder as read
  if (reminderId) {
    event.waitUntil(
      fetch('/api/notifications/mark-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: reminderId }),
      }).catch(error => console.error('Failed to mark notification as read:', error))
    );
  }
});

// Handle offline fallback
self.addEventListener('install', (event) => {
  const offlineFallbackPage = '/offline.html';
  event.waitUntil(
    caches.open('offline-cache').then((cache) => {
      return cache.add(offlineFallbackPage);
    })
  );
});

self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/offline.html');
      })
    );
  }
});

// Sync background payments
self.addEventListener('sync', (event) => {
  if (event.tag === 'process-reminders') {
    event.waitUntil(processDueReminders());
  }
});

// Process due reminders
async function processDueReminders() {
  try {
    const response = await fetch('/api/notifications/process-due', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error(`Failed to process reminders: ${response.status}`);
    }
    
    const result = await response.json();
    console.log(`Processed ${result.processed} reminders`);
    
    return result;
  } catch (error) {
    console.error('Error processing due reminders:', error);
    throw error;
  }
} 